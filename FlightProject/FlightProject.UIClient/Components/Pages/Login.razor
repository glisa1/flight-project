@page "/login"
@using FlightProject.UIClient.Models
@using FlightProject.UIClient.Services

@inject IAuthService _authService
@inject NavigationManager Navigation

<h3>Login</h3>

<div>
    @if (loginFailed)
    {
        <div class="text-danger">
            Login failed. Password or username is incorrect.
        </div>
    }
    <EditForm FormName="Login" Model=@loginModel OnValidSubmit=@FormSubmitted>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Email">Email</label>
            <InputText @bind-value=loginModel!.Email class="form-control" id="Email" />
            <ValidationMessage For="() => loginModel.Email" />
        </div>
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText @bind-value=loginModel!.Password class="form-control" id="Password" type="password" />
            <ValidationMessage For="() => loginModel.Password" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel? loginModel { get; set; }

    private bool loginFailed = false;

    protected override void OnInitialized()
    {
        loginModel ??= new();
    }

    private async Task FormSubmitted(EditContext editContext)
    {
        var authResult = await _authService.AuthenticateAsync(loginModel?.Email!, loginModel?.Password!);
        if (authResult is not null && authResult.IsAuthenticated())
        {
            Navigation.NavigateTo("");
        }
        else
        {
            loginFailed = true;
        }
    }
}
